{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject","doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureRef","doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureRef\/ClosureProtocol-Implementations"]]},"abstract":[{"text":"Takes over the initial ownership of a closure.","type":"text"}],"metadata":{"title":"sink()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sink"},{"text":"()","kind":"text"}],"extendedModule":"GLibObject","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","modules":[{"name":"GLibObject"}],"externalID":"s:10GLibObject15ClosureProtocolPAAE4sinkyyF::SYNTHESIZED::s:10GLibObject10ClosureRefV"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sink","kind":"identifier"},{"kind":"text","text":"()"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"Each closure is initially created in a “floating” state, which means","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that the initial reference count is not owned by any caller."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function checks to see if the object is still floating, and if so,"},{"type":"text","text":" "},{"text":"unsets the floating state and decreases the reference count. If the","type":"text"},{"text":" ","type":"text"},{"text":"closure is not floating, ","type":"text"},{"type":"codeVoice","code":"g_closure_sink()"},{"type":"text","text":" does nothing."}]},{"inlineContent":[{"type":"text","text":"The reason for the existence of the floating state is to prevent"},{"type":"text","text":" "},{"text":"cumbersome code sequences like:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"(C Language Example):","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"C","code":["closure = g_cclosure_new (cb_func, cb_data);","g_source_set_closure (source, closure);","g_closure_unref (closure); \/\/ GObject doesn't really need this"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"code":"g_source_set_closure()","type":"codeVoice"},{"text":" (and similar functions) take ownership of the","type":"text"},{"type":"text","text":" "},{"text":"initial reference count, if it is unowned, we instead can write:","type":"text"}]},{"inlineContent":[{"text":"(C Language Example):","type":"text"}],"type":"paragraph"},{"code":["g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));"],"type":"codeListing","syntax":"C"},{"inlineContent":[{"text":"Generally, this function is used together with ","type":"text"},{"type":"codeVoice","code":"g_closure_ref()"},{"type":"text","text":". An example"},{"text":" ","type":"text"},{"text":"of storing a closure for later notification looks like:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"syntax":"C","code":["static GClosure *notify_closure = NULL;","void","foo_notify_set_closure (GClosure *closure)","{","  if (notify_closure)","    g_closure_unref (notify_closure);","  notify_closure = closure;","  if (notify_closure)","    {","      g_closure_ref (notify_closure);","      g_closure_sink (notify_closure);","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because "},{"code":"g_closure_sink()","type":"codeVoice"},{"text":" may decrement the reference count of a closure","type":"text"},{"type":"text","text":" "},{"text":"(if it hasn’t been called on ","type":"text"},{"type":"codeVoice","code":"closure"},{"type":"text","text":" yet) just like "},{"type":"codeVoice","code":"g_closure_unref()"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"g_closure_ref()","type":"codeVoice"},{"text":" should be called prior to this function.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureRef\/sink()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/glibobject\/closureref\/sink()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://GLibObject/documentation/GLibObject/ClosureRef/ClosureProtocol-Implementations":{"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureRef\/ClosureProtocol-Implementations","type":"topic","title":"ClosureProtocol Implementations","kind":"article","url":"\/documentation\/glibobject\/closureref\/closureprotocol-implementations","role":"collectionGroup","abstract":[]},"doc://GLibObject/documentation/GLibObject":{"role":"collection","kind":"symbol","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","url":"\/documentation\/glibobject","title":"GLibObject","type":"topic"},"doc://GLibObject/documentation/GLibObject/ClosureRef/sink()":{"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureRef\/sink()","type":"topic","title":"sink()","abstract":[{"type":"text","text":"Takes over the initial ownership of a closure."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sink"},{"kind":"text","text":"()"}],"url":"\/documentation\/glibobject\/closureref\/sink()"},"doc://GLibObject/documentation/GLibObject/ClosureRef":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GClosure"},{"text":" represents a callback supplied by the programmer.","type":"text"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureRef","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ClosureRef"}],"kind":"symbol","navigatorTitle":[{"text":"ClosureRef","kind":"identifier"}],"title":"ClosureRef","url":"\/documentation\/glibobject\/closureref"}}}