{"metadata":{"roleHeading":"Instance Method","title":"sink()","role":"symbol","symbolKind":"method","externalID":"s:10GLibObject15ClosureProtocolPAAE4sinkyyF::SYNTHESIZED::s:10GLibObject7ClosureC","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sink","kind":"identifier"},{"text":"()","kind":"text"}],"modules":[{"name":"GLibObject"}],"extendedModule":"GLibObject"},"identifier":{"url":"doc:\/\/GLibObject\/documentation\/GLibObject\/Closure\/sink()","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/glibobject\/closure\/sink()"]}],"hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject","doc:\/\/GLibObject\/documentation\/GLibObject\/Closure","doc:\/\/GLibObject\/documentation\/GLibObject\/Closure\/ClosureProtocol-Implementations"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sink"},{"text":"()","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each closure is initially created in a “floating” state, which means"},{"type":"text","text":" "},{"text":"that the initial reference count is not owned by any caller.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function checks to see if the object is still floating, and if so,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unsets the floating state and decreases the reference count. If the"},{"type":"text","text":" "},{"type":"text","text":"closure is not floating, "},{"type":"codeVoice","code":"g_closure_sink()"},{"type":"text","text":" does nothing."}]},{"inlineContent":[{"type":"text","text":"The reason for the existence of the floating state is to prevent"},{"type":"text","text":" "},{"text":"cumbersome code sequences like:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"code":["closure = g_cclosure_new (cb_func, cb_data);","g_source_set_closure (source, closure);","g_closure_unref (closure); \/\/ GObject doesn't really need this"],"type":"codeListing","syntax":"C"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"g_source_set_closure()"},{"text":" (and similar functions) take ownership of the","type":"text"},{"type":"text","text":" "},{"text":"initial reference count, if it is unowned, we instead can write:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","code":["g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));"],"syntax":"C"},{"inlineContent":[{"type":"text","text":"Generally, this function is used together with "},{"code":"g_closure_ref()","type":"codeVoice"},{"text":". An example","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of storing a closure for later notification looks like:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"syntax":"C","code":["static GClosure *notify_closure = NULL;","void","foo_notify_set_closure (GClosure *closure)","{","  if (notify_closure)","    g_closure_unref (notify_closure);","  notify_closure = closure;","  if (notify_closure)","    {","      g_closure_ref (notify_closure);","      g_closure_sink (notify_closure);","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"g_closure_sink()"},{"text":" may decrement the reference count of a closure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(if it hasn’t been called on "},{"type":"codeVoice","code":"closure"},{"text":" yet) just like ","type":"text"},{"code":"g_closure_unref()","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"g_closure_ref()","type":"codeVoice"},{"text":" should be called prior to this function.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Takes over the initial ownership of a closure."}],"kind":"symbol","sections":[],"references":{"doc://GLibObject/documentation/GLibObject/Closure/sink()":{"kind":"symbol","title":"sink()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"sink","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","url":"\/documentation\/glibobject\/closure\/sink()","abstract":[{"text":"Takes over the initial ownership of a closure.","type":"text"}],"role":"symbol","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Closure\/sink()"},"doc://GLibObject/documentation/GLibObject/Closure/ClosureProtocol-Implementations":{"url":"\/documentation\/glibobject\/closure\/closureprotocol-implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Closure\/ClosureProtocol-Implementations","title":"ClosureProtocol Implementations","abstract":[]},"doc://GLibObject/documentation/GLibObject/Closure":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Closure","kind":"identifier"}],"role":"symbol","url":"\/documentation\/glibobject\/closure","navigatorTitle":[{"text":"Closure","kind":"identifier"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Closure","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GClosure"},{"type":"text","text":" represents a callback supplied by the programmer."}],"title":"Closure","kind":"symbol","type":"topic"},"doc://GLibObject/documentation/GLibObject":{"role":"collection","kind":"symbol","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","url":"\/documentation\/glibobject","title":"GLibObject","type":"topic"}}}