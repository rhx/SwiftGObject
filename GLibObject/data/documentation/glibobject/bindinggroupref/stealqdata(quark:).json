{"variants":[{"paths":["\/documentation\/glibobject\/bindinggroupref\/stealqdata(quark:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Instance Method","role":"symbol","title":"stealQdata(quark:)","modules":[{"name":"GLibObject"}],"externalID":"s:10GLibObject0B8ProtocolPAAE10stealQdata5quarkSvSgs6UInt32V_tF::SYNTHESIZED::s:10GLibObject15BindingGroupRefV","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"stealQdata"},{"text":"(","kind":"text"},{"text":"quark","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"GQuark","kind":"typeIdentifier","preciseIdentifier":"c:@T@GQuark"},{"kind":"text","text":") -> "},{"preciseIdentifier":"c:gtypes.h@T@gpointer","text":"gpointer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"extendedModule":"GLibObject"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingGroupRef\/stealQdata(quark:)"},"hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingGroupRef","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingGroupRef\/ObjectProtocol-Implementations"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"This function gets back user data pointers stored via","type":"text"},{"type":"text","text":" "},{"code":"g_object_set_qdata()","type":"codeVoice"},{"type":"text","text":" and removes the "},{"code":"data","type":"codeVoice"},{"text":" from object","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without invoking its "},{"code":"destroy()","type":"codeVoice"},{"text":" function (if any was","type":"text"},{"type":"text","text":" "},{"text":"set).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Usually, calling this function is only required to update"},{"text":" ","type":"text"},{"text":"user data pointers with a destroy notifier, for example:","type":"text"},{"text":" ","type":"text"},{"text":"(C Language Example):","type":"text"}],"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"stealQdata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"quark","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"GQuark","kind":"typeIdentifier","preciseIdentifier":"c:@T@GQuark"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"c:gtypes.h@T@gpointer","text":"gpointer","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"codeListing","syntax":"C","code":["void","object_add_to_user_list (GObject     *object,","                         const gchar *new_string)","{","  \/\/ the quark, naming the object data","  GQuark quark_string_list = g_quark_from_static_string (\"my-string-list\");","  \/\/ retrieve the old string list","  GList *list = g_object_steal_qdata (object, quark_string_list);","","  \/\/ prepend new string","  list = g_list_prepend (list, g_strdup (new_string));","  \/\/ this changed 'list', so we need to set it again","  g_object_set_qdata_full (object, quark_string_list, list, free_string_list);","}","static void","free_string_list (gpointer data)","{","  GList *node, *list = data;","","  for (node = list; node; node = node->next)","    g_free (node->data);","  g_list_free (list);","}"]},{"inlineContent":[{"type":"text","text":"Using "},{"code":"g_object_get_qdata()","type":"codeVoice"},{"type":"text","text":" in the above example, instead of"},{"type":"text","text":" "},{"code":"g_object_steal_qdata()","type":"codeVoice"},{"type":"text","text":" would have left the destroy function set,"},{"type":"text","text":" "},{"type":"text","text":"and thus the partial string list would have been freed upon"},{"text":" ","type":"text"},{"type":"codeVoice","code":"g_object_set_qdata_full()"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://GLibObject/documentation/GLibObject/BindingGroupRef/stealQdata(quark:)":{"title":"stealQdata(quark:)","role":"symbol","url":"\/documentation\/glibobject\/bindinggroupref\/stealqdata(quark:)","type":"topic","kind":"symbol","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingGroupRef\/stealQdata(quark:)","abstract":[{"text":"This function gets back user data pointers stored via","type":"text"},{"type":"text","text":" "},{"code":"g_object_set_qdata()","type":"codeVoice"},{"type":"text","text":" and removes the "},{"type":"codeVoice","code":"data"},{"type":"text","text":" from object"},{"type":"text","text":" "},{"type":"text","text":"without invoking its "},{"code":"destroy()","type":"codeVoice"},{"type":"text","text":" function (if any was"},{"type":"text","text":" "},{"text":"set).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Usually, calling this function is only required to update"},{"type":"text","text":" "},{"type":"text","text":"user data pointers with a destroy notifier, for example:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stealQdata","kind":"identifier"},{"text":"(","kind":"text"},{"text":"quark","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"GQuark","kind":"typeIdentifier","preciseIdentifier":"c:@T@GQuark"},{"kind":"text","text":") -> "},{"text":"gpointer","kind":"typeIdentifier","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"text":"?","kind":"text"}]},"doc://GLibObject/documentation/GLibObject/BindingGroupRef":{"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingGroupRef","title":"BindingGroupRef","url":"\/documentation\/glibobject\/bindinggroupref","abstract":[{"type":"codeVoice","code":"GBindingGroup"},{"text":" can be used to bind multiple properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from an object collectively."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingGroupRef","kind":"identifier"}],"navigatorTitle":[{"text":"BindingGroupRef","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://GLibObject/documentation/GLibObject/BindingGroupRef/ObjectProtocol-Implementations":{"type":"topic","role":"collectionGroup","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingGroupRef\/ObjectProtocol-Implementations","title":"ObjectProtocol Implementations","abstract":[],"kind":"article","url":"\/documentation\/glibobject\/bindinggroupref\/objectprotocol-implementations"},"doc://GLibObject/documentation/GLibObject":{"role":"collection","kind":"symbol","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","url":"\/documentation\/glibobject","title":"GLibObject","type":"topic"}}}