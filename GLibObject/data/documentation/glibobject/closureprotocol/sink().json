{"variants":[{"paths":["\/documentation\/glibobject\/closureprotocol\/sink()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Takes over the initial ownership of a closure."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sink"},{"text":"()","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Each closure is initially created in a “floating” state, which means","type":"text"},{"type":"text","text":" "},{"text":"that the initial reference count is not owned by any caller.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function checks to see if the object is still floating, and if so,","type":"text"},{"type":"text","text":" "},{"text":"unsets the floating state and decreases the reference count. If the","type":"text"},{"text":" ","type":"text"},{"text":"closure is not floating, ","type":"text"},{"type":"codeVoice","code":"g_closure_sink()"},{"text":" does nothing.","type":"text"}]},{"inlineContent":[{"text":"The reason for the existence of the floating state is to prevent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"cumbersome code sequences like:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"syntax":"C","code":["closure = g_cclosure_new (cb_func, cb_data);","g_source_set_closure (source, closure);","g_closure_unref (closure); \/\/ GObject doesn't really need this"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because "},{"code":"g_source_set_closure()","type":"codeVoice"},{"text":" (and similar functions) take ownership of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initial reference count, if it is unowned, we instead can write:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"(C Language Example):"}],"type":"paragraph"},{"type":"codeListing","syntax":"C","code":["g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));"]},{"type":"paragraph","inlineContent":[{"text":"Generally, this function is used together with ","type":"text"},{"type":"codeVoice","code":"g_closure_ref()"},{"text":". An example","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of storing a closure for later notification looks like:"}]},{"type":"paragraph","inlineContent":[{"text":"(C Language Example):","type":"text"}]},{"code":["static GClosure *notify_closure = NULL;","void","foo_notify_set_closure (GClosure *closure)","{","  if (notify_closure)","    g_closure_unref (notify_closure);","  notify_closure = closure;","  if (notify_closure)","    {","      g_closure_ref (notify_closure);","      g_closure_sink (notify_closure);","    }","}"],"syntax":"C","type":"codeListing"},{"inlineContent":[{"text":"Because ","type":"text"},{"type":"codeVoice","code":"g_closure_sink()"},{"text":" may decrement the reference count of a closure","type":"text"},{"type":"text","text":" "},{"text":"(if it hasn’t been called on ","type":"text"},{"code":"closure","type":"codeVoice"},{"type":"text","text":" yet) just like "},{"type":"codeVoice","code":"g_closure_unref()"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"g_closure_ref()"},{"type":"text","text":" should be called prior to this function."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureProtocol\/sink()"},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject","doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureProtocol"]]},"metadata":{"title":"sink()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sink"},{"text":"()","kind":"text"}],"modules":[{"name":"GLibObject"}],"extendedModule":"GLibObject","externalID":"s:10GLibObject15ClosureProtocolPAAE4sinkyyF","symbolKind":"method","role":"symbol","roleHeading":"Instance Method"},"references":{"doc://GLibObject/documentation/GLibObject/ClosureProtocol/sink()":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sink","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Takes over the initial ownership of a closure."}],"type":"topic","role":"symbol","title":"sink()","url":"\/documentation\/glibobject\/closureprotocol\/sink()","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureProtocol\/sink()"},"doc://GLibObject/documentation/GLibObject":{"role":"collection","kind":"symbol","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","url":"\/documentation\/glibobject","title":"GLibObject","type":"topic"},"doc://GLibObject/documentation/GLibObject/ClosureProtocol":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ClosureProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"ClosureProtocol"}],"abstract":[{"type":"text","text":"A "},{"code":"GClosure","type":"codeVoice"},{"type":"text","text":" represents a callback supplied by the programmer."}],"role":"symbol","type":"topic","kind":"symbol","title":"ClosureProtocol","url":"\/documentation\/glibobject\/closureprotocol","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ClosureProtocol"}}}