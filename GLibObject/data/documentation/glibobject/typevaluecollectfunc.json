{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeValueCollectFunc"}],"title":"TypeValueCollectFunc","symbolKind":"typealias","role":"symbol","modules":[{"name":"GLibObject"}],"externalID":"s:10GLibObject20TypeValueCollectFunca","navigatorTitle":[{"text":"TypeValueCollectFunc","kind":"identifier"}],"roleHeading":"Type Alias"},"hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/glibobject\/typevaluecollectfunc"]}],"sections":[],"identifier":{"url":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueCollectFunc","interfaceLanguage":"swift"},"abstract":[{"text":"This function is responsible for converting the values collected from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a variadic argument list into contents suitable for storage in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Value"},{"type":"text","text":"."}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeValueCollectFunc","kind":"identifier"},{"kind":"text","text":" = "},{"text":"GTypeValueCollectFunc","kind":"typeIdentifier","preciseIdentifier":"c:@T@GTypeValueCollectFunc"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"inlineContent":[{"text":"This function should setup ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" similar to "},{"type":"reference","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueInitFunc","isActive":true},{"text":"; e.g.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for a string value that does not allow "},{"code":"NULL","type":"codeVoice"},{"type":"text","text":" pointers, it needs to either"},{"type":"text","text":" "},{"text":"emit an error, or do an implicit conversion by storing an empty string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" passed in to this function has a zero-filled data array, so"},{"text":" ","type":"text"},{"text":"just like for ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueInitFunc"},{"text":" it is guaranteed to not contain any old","type":"text"},{"text":" ","type":"text"},{"text":"contents that might need freeing.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"nCollectValues","type":"codeVoice"},{"type":"text","text":" argument is the string length of the "},{"type":"codeVoice","code":"collect_format"},{"type":"text","text":" "},{"text":"field of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueTable","type":"reference"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"collect_values"},{"type":"text","text":" is an array of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeCValue"},{"text":" ","type":"text"},{"type":"text","text":"with length of "},{"type":"codeVoice","code":"nCollectValues"},{"type":"text","text":", containing the collected values according"},{"type":"text","text":" "},{"text":"to ","type":"text"},{"type":"codeVoice","code":"collect_format"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"collectFlags","type":"codeVoice"},{"text":" argument provided as a hint by the caller. It may","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"contain the flag "},{"type":"reference","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/valueNocopyContents","isActive":true},{"text":" indicating that the collected","type":"text"},{"type":"text","text":" "},{"text":"value contents may be considered ‘static’ for the duration of the ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" "},{"text":"lifetime. Thus an extra copy of the contents stored in ","type":"text"},{"type":"codeVoice","code":"collectValues"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"not required for assignment to "},{"code":"value","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For our above string example, we continue with:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"(C Language Example):"}],"type":"paragraph"},{"type":"codeListing","code":["if (!collect_values[0].v_pointer)","  value->data[0].v_pointer = g_strdup (\"\");","else if (collect_flags & G_VALUE_NOCOPY_CONTENTS)","  {","    value->data[0].v_pointer = collect_values[0].v_pointer;","    \/\/ keep a flag for the value_free() implementation to not free this string","    value->data[1].v_uint = G_VALUE_NOCOPY_CONTENTS;","  }","else","  value->data[0].v_pointer = g_strdup (collect_values[0].v_pointer);","return NULL;"],"syntax":"C"},{"type":"paragraph","inlineContent":[{"text":"It should be noted, that it is generally a bad idea to follow the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/valueNocopyContents","isActive":true},{"type":"text","text":" hint for reference counted types. Due to"},{"text":" ","type":"text"},{"type":"text","text":"reentrancy requirements and reference count assertions performed"},{"type":"text","text":" "},{"type":"text","text":"by the signal emission code, reference counts should always be"},{"text":" ","type":"text"},{"type":"text","text":"incremented for reference counted contents stored in the "},{"code":"value->data","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"array. To deviate from our string example for a moment, and taking"},{"text":" ","type":"text"},{"type":"text","text":"a look at an exemplary implementation for "},{"type":"codeVoice","code":"GTypeValueTable.collect_value()"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"GObject"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"code":["GObject *object = G_OBJECT (collect_values[0].v_pointer);","g_return_val_if_fail (object != NULL,","   g_strdup_printf (\"Object %p passed as invalid NULL pointer\", object));","\/\/ never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types","value->data[0].v_pointer = g_object_ref (object);","return NULL;"],"type":"codeListing","syntax":"C"},{"inlineContent":[{"type":"text","text":"The reference count for valid objects is always incremented, regardless"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"collect_flags","type":"codeVoice"},{"type":"text","text":". For invalid objects, the example returns a newly"},{"type":"text","text":" "},{"type":"text","text":"allocated string without altering "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Upon success, "},{"code":"collect_value()","type":"codeVoice"},{"type":"text","text":" needs to return "},{"code":"NULL","type":"codeVoice"},{"text":". If, however,","type":"text"},{"type":"text","text":" "},{"text":"an error condition occurred, ","type":"text"},{"code":"collect_value()","type":"codeVoice"},{"type":"text","text":" should return a newly"},{"type":"text","text":" "},{"text":"allocated string containing an error diagnostic.","type":"text"}]},{"inlineContent":[{"text":"The calling code makes no assumptions about the ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" contents being"},{"type":"text","text":" "},{"type":"text","text":"valid upon error returns, "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is simply thrown away without further"},{"type":"text","text":" "},{"type":"text","text":"freeing. As such, it is a good idea to not allocate "},{"type":"codeVoice","code":"GValue"},{"type":"text","text":" contents"},{"text":" ","type":"text"},{"type":"text","text":"prior to returning an error; however, "},{"type":"codeVoice","code":"collect_values()"},{"text":" is not obliged","type":"text"},{"type":"text","text":" "},{"text":"to return a correctly setup ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" for error returns, simply because"},{"text":" ","type":"text"},{"text":"any non-","type":"text"},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" return is considered a fatal programming error, and"},{"type":"text","text":" "},{"text":"further program behaviour is undefined.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://GLibObject/documentation/GLibObject/TypeCValue":{"url":"\/documentation\/glibobject\/typecvalue","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeCValue","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TypeCValue","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TypeCValue"}],"title":"TypeCValue","abstract":[{"type":"text","text":"A union holding one collected value."}]},"doc://GLibObject/documentation/GLibObject/valueNocopyContents":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"If passed to "},{"type":"codeVoice","code":"G_VALUE_COLLECT()"},{"text":", allocated data won’t be copied","type":"text"},{"type":"text","text":" "},{"text":"but used verbatim. This does not affect ref-counted types like","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"objects. This does not affect usage of "},{"type":"codeVoice","code":"g_value_copy()"},{"text":", the data will","type":"text"},{"type":"text","text":" "},{"text":"be copied if it is not ref-counted.","type":"text"}],"fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueNocopyContents"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"}],"url":"\/documentation\/glibobject\/valuenocopycontents","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/valueNocopyContents","title":"valueNocopyContents","role":"symbol"},"doc://GLibObject/documentation/GLibObject/TypeValueCollectFunc":{"kind":"symbol","type":"topic","abstract":[{"text":"This function is responsible for converting the values collected from","type":"text"},{"type":"text","text":" "},{"text":"a variadic argument list into contents suitable for storage in a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Value"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeValueCollectFunc"}],"url":"\/documentation\/glibobject\/typevaluecollectfunc","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueCollectFunc","title":"TypeValueCollectFunc","role":"symbol","navigatorTitle":[{"text":"TypeValueCollectFunc","kind":"identifier"}]},"doc://GLibObject/documentation/GLibObject/TypeValueInitFunc":{"kind":"symbol","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueInitFunc","abstract":[{"text":"Initializes the value contents by setting the fields of the ","type":"text"},{"type":"codeVoice","code":"value->data"},{"type":"text","text":" "},{"text":"array.","type":"text"}],"role":"symbol","url":"\/documentation\/glibobject\/typevalueinitfunc","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeValueInitFunc"}],"title":"TypeValueInitFunc","navigatorTitle":[{"kind":"identifier","text":"TypeValueInitFunc"}],"type":"topic"},"doc://GLibObject/documentation/GLibObject":{"role":"collection","kind":"symbol","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","url":"\/documentation\/glibobject","title":"GLibObject","type":"topic"},"doc://GLibObject/documentation/GLibObject/Value":{"navigatorTitle":[{"kind":"identifier","text":"Value"}],"abstract":[{"type":"text","text":"This class is the main Swift wrapper with memory management"},{"type":"text","text":" "},{"type":"text","text":"for underlying "},{"type":"codeVoice","code":"GValues"},{"text":" (the opaque GLib structure used to","type":"text"},{"type":"text","text":" "},{"text":"hold different types of values.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/value","role":"symbol","title":"Value","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Value","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Value","kind":"identifier"}]},"doc://GLibObject/documentation/GLibObject/TypeValueTable":{"url":"\/documentation\/glibobject\/typevaluetable","type":"topic","role":"symbol","abstract":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueTable","type":"reference"},{"type":"text","text":" provides the functions required by the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/Value"},{"type":"text","text":" "},{"type":"text","text":"implementation, to serve as a container for values of a type."}],"kind":"symbol","title":"TypeValueTable","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeValueTable"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/TypeValueTable","navigatorTitle":[{"kind":"identifier","text":"TypeValueTable"}]}}}